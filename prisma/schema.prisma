generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  image           String?
  name            String?
  email           String?  @unique
  phoneNumber     String   @unique
  passwordHash    String?
  vehicleTypeId   String?  @db.ObjectId
  vehicleType     VehicleType? @relation(fields: [vehicleTypeId], references: [id])
  licensePlate    String?
  status          String   @default("active")
  currentLatitude Float?
  currentLongitude Float?
  lastUpdatedAt   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  role String?
  // Relations
  locations       LocationTracking[]
  deliveries      Delivery[] @relation("AssignedDeliveries")
  sentDeliveries  Delivery[] @relation("SenderDeliveries")
  statusLogs      DeliveryStatusLog[]
  routeHistory    RouteHistory[]
  notifications   Notification[]
  rating Float?  @default(4.0)
}

model VehicleType {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  maxCapacityKg Float?
  maxVolumeM3   Float?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  icon          String?
  cost          Float?
  perKmRate     Float?
  rushTimeAdd   Float?
  users         User[]
}

model LocationTracking {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  latitude     Float
  longitude    Float
  speed        Float?
  heading      Float?
  accuracy     Float?
  batteryLevel Float?
  timestamp    DateTime @default(now())
}

model Delivery {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  trackingNumber       String   @unique
  senderId             String   @db.ObjectId
  sender               User     @relation("SenderDeliveries", fields: [senderId], references: [id])
  recipientName        String
  recipientPhone       String
  pickupAddress        String
  pickupLatitude       Float
  pickupLongitude      Float
  dropoffAddress       String
  dropoffLatitude      Float
  dropoffLongitude     Float
  assignedRiderId      String?  @db.ObjectId
  assignedRider        User?    @relation("AssignedDeliveries", fields: [assignedRiderId], references: [id])
  deliveryStatus       String   @default("pending")
  estimatedDeliveryTime DateTime?
  actualDeliveryTime   DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  deliveryType         String? // e.g., "standard", "express"
  paymentStatus        String? // e.g., "unpaid", "paid", "refunded"
  paymentMethod        String? // e.g., "cash", "credit_card", "gcash"
  deliveryFee          Float?
  cancellationReason   String?
  failedAttemptReason  String?
  currentLatitude      Float?
  currentLongitude     Float?
  baseRate             Float?
  perKmRate            Float?
  distance             Float?
  statusLogs           DeliveryStatusLog[]
  proofOfDelivery      ProofOfDelivery?
  packages             Package[]
  routeHistory         RouteHistory[]
  rejection            SkippedBy[]
}

model SkippedBy {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  deliveryId String   @db.ObjectId
  delivery   Delivery @relation(fields: [deliveryId], references: [id])
  riderId    String?  @db.ObjectId
}

model DeliveryStatusLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  deliveryId  String   @db.ObjectId
  delivery    Delivery @relation(fields: [deliveryId], references: [id])
  status      String
  updatedById String   @db.ObjectId
  updatedBy   User     @relation(fields: [updatedById], references: [id])
  remarks     String?
  timestamp   DateTime @default(now())
}

model ProofOfDelivery {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  deliveryId    String   @unique @db.ObjectId
  delivery      Delivery @relation(fields: [deliveryId], references: [id])
  photoUrl      String?
  signatureData String?
  receivedBy    String
  receivedAt    DateTime @default(now())
}

model RouteHistory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  riderId    String   @db.ObjectId
  rider      User     @relation(fields: [riderId], references: [id])
  deliveryId String?  @db.ObjectId
  delivery   Delivery? @relation(fields: [deliveryId], references: [id])
  latitude   Float
  longitude  Float
  recordedAt DateTime @default(now())
}

model Package {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  deliveryId          String   @db.ObjectId
  delivery            Delivery @relation(fields: [deliveryId], references: [id])
  packageType         String
  weight              Float?
  dimensions          String?
  specialInstructions String?
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model TrackingCounter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime @unique
  counter       Int
}
